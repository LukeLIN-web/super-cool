#include<stdio.h>
#include <stdlib.h>
    int overstep_check(int i, int j);
    int longest_path(int i, int j); 
	static int arr[50][50] ;
	int	max = 0 ;
	int m=7,n=7;
	int dir[2][4] = {{0, 0, -1, 1}, {-1, 1, 0, 0}}; // 
int main(){
	int i ;
	int j;
	scanf("%d%d",&m,&n) ;
	for(i = 0; i < m; i++){ 				
        for(j = 0; j < n; j++){
            scanf("%d",&arr[i][j] ) ;
            //printf("%d\n",arr[i][j] ) ;
           // printf("%d ",i*n+j)  ;
        }
    }
    for(i = 0; i < m; i++){ 				
        for(j = 0; j < n; j++){
            if(max < longest_path(i,j)) max = longest_path(i,j) ;
            //printf("%d",max) ;
        }
    }
    printf("%d",max) ;
    return 0 ;
}

int longest_path(int i,int j){
    int k,len=1;
        for(k = 0; k < 4; k++){
            if(overstep_check(i + dir[0][k], j + dir[1][k]) == 1){          //don't out map
                if(arr[i][j] > arr[i + dir[0][k]][j + dir[1][k]]){        
				    printf("\n%d %d %d ",arr[i][j],arr[i + dir[0][k]][j + dir[1][k]],k) ;         
                   if( len <=  longest_path(i + dir[0][k], j + dir[1][k])+1)  
				    len = longest_path(i + dir[0][k], j + dir[1][k])+1 ;
                }
                else{
                         // if this location lower than all around,the longest length as one
                     printf("\n[%d] [%d] %d",i,j,k) ;
				}
            }
        }
        return len;
        // if(k==4) return 1  else return  longest_path(i + dir[0][k], j + dir[1][k])+1;
    }
int overstep_check(int i, int j){ // 
   if(i >= 0 && i < m && j >= 0 && j < n){
        return 1;
   }else{
        return 0;
   }
}



